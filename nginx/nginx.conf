# Don't daemonize because this runs inside docker
daemon off;

# error level: info will provide useful output from nginx lua engine
error_log /dev/stderr info;

worker_processes auto;

events {
  worker_connections  8192;
  use epoll;
}

http {

  tcp_nodelay on;
  sendfile on;
  keepalive_timeout 0;




  # PHP Server
  server {
    listen       8080;
    access_log /dev/stdout;

    index index.php;
    root /var/www/web;

    try_files $uri $uri/ $uri/index.php /index.php;

    location ~ \.php$ { 
        fastcgi_pass php:9000;
        fastcgi_read_timeout 10;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
  }














  # LUA Server
  server {
    listen       8081;
    access_log /dev/stdout;

    # Use docker dns resolver
    resolver 127.0.0.11;

    location / {
      content_by_lua_block {
          local redis = require "resty.redis"
          local json  = require "cjson"
          local red = redis:new()

          red:set_timeout(1000) -- 1 sec

          local ok, err = red:connect("redis", 6379)
          if not ok then
              ngx.status = 500
              ngx.say( json.encode({ result="ERROR", info=err }) )
              return
          end

          if ngx.var.request_method == 'GET' then
            
            local result, err = red:get( ngx.var.request_uri )

            if not result then
                ngx.status = 500
                ngx.say( json.encode({ result="ERROR", info=err }) )
            elseif result == ngx.null then
              ngx.status = 404
              ngx.say( json.encode({ result="NOT_FOUND", info=err }) )
            else
              ngx.status = 200
              ngx.say( result )
            end

          elseif ngx.var.request_method == 'POST' then

            -- Ensure that body is in buffer
            ngx.req.read_body()

            local content = ngx.req.get_body_data()

            -- Minify JSON
            if content then
              content = json.encode( json.decode( content ) )
            end

            local result, err = red:set( ngx.var.request_uri, content )

            if not result then
                ngx.status = 500
                ngx.say( json.encode({ result="ERROR", info=err }) )
            else
              ngx.status = 200
              ngx.say( json.encode({result='OK', info='Data saved.'}) )
            end

          elseif ngx.var.request_method == 'DELETE' then

            -- local result, err = red:delete( ngx.var.request_uri, content )

            if not result then
                ngx.status = 500
                ngx.say( json.encode({ result="ERROR", info=err }) )
                return
            else
              ngx.status = 200
              ngx.say( json.encode({result='OK', info='Data saved.'}) )
            end
          else
            ngx.status = 405
            ngx.say( json.encode({result='BAD_METHOD', info='Only GET,POST,DELETE methods are supported.'}) )
          end

          -- Close redis connection
          red:close()
      }
    }
  }

}